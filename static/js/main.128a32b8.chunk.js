(window.webpackJsonp=window.webpackJsonp||[]).push([[0],Array(19).concat([function(e,t,n){e.exports=n.p+"static/media/logo.747b7f03.png"},,function(e,t,n){e.exports=n.p+"static/media/work_in_progress.be60bf68.gif"},,function(e,t,n){e.exports=n.p+"static/media/logo.5d5d9eef.svg"},,,,,function(e,t,n){e.exports=n(84)},,,,,function(e,t,n){},function(e,t,n){},function(e,t,n){},function(e,t,n){},function(e,t,n){},function(e,t,n){},,,,,,,,,function(e,t,n){},function(e,t,n){},function(e,t,n){},function(e,t,n){},function(e,t,n){var s={"./advanced_features.png":52,"./bucket_policy.png":53,"./bucket_properties.png":54,"./create_bucket.png":55,"./create_bucket_dialog.png":56,"./create_bucket_permissions.png":57,"./create_bucket_review.png":58,"./create_hosted_zone.png":59,"./create_hosted_zone_pane.png":60,"./create_sass_starter.png":61,"./custom_nameservers.png":62,"./edit_typeA_record.png":63,"./godaddy_custom.png":64,"./godaddy_nameservers.png":65,"./goto_sass_starter.png":66,"./hosted_zone_nameservers.png":67,"./jest_test_all.png":68,"./jest_test_initial.png":69,"./logo.png":19,"./manage_dns.png":70,"./no_indexjs.png":71,"./npm_init_sass.png":72,"./ns_soa_records.png":73,"./refresh_records.png":74,"./route53_get_started.png":75,"./search_route53.png":76,"./search_s3.png":77,"./sw_upload_files.png":78,"./w4s_packagejson.png":79,"./wds_inmemory_files.png":80,"./work_in_progress.gif":21};function o(e){var t=a(e);return n(t)}function a(e){var t=s[e];if(!(t+1)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return t}o.keys=function(){return Object.keys(s)},o.resolve=a,e.exports=o,o.id=51},function(e,t,n){e.exports=n.p+"static/media/advanced_features.1f39373d.png"},function(e,t,n){e.exports=n.p+"static/media/bucket_policy.2028dc27.png"},function(e,t,n){e.exports=n.p+"static/media/bucket_properties.bcd3543a.png"},function(e,t,n){e.exports=n.p+"static/media/create_bucket.8f20b9ea.png"},function(e,t,n){e.exports=n.p+"static/media/create_bucket_dialog.59bb8361.png"},function(e,t,n){e.exports=n.p+"static/media/create_bucket_permissions.5dce48bd.png"},function(e,t,n){e.exports=n.p+"static/media/create_bucket_review.462810c2.png"},function(e,t,n){e.exports=n.p+"static/media/create_hosted_zone.82b42751.png"},function(e,t,n){e.exports=n.p+"static/media/create_hosted_zone_pane.74141634.png"},function(e,t,n){e.exports=n.p+"static/media/create_sass_starter.0822bdd0.png"},function(e,t,n){e.exports=n.p+"static/media/custom_nameservers.de6a8c3f.png"},function(e,t,n){e.exports=n.p+"static/media/edit_typeA_record.2cc43c09.png"},function(e,t,n){e.exports=n.p+"static/media/godaddy_custom.e3dec82c.png"},function(e,t,n){e.exports=n.p+"static/media/godaddy_nameservers.aff27221.png"},function(e,t,n){e.exports=n.p+"static/media/goto_sass_starter.058dd491.png"},function(e,t,n){e.exports=n.p+"static/media/hosted_zone_nameservers.bd5fe5cf.png"},function(e,t,n){e.exports=n.p+"static/media/jest_test_all.82b09c2f.png"},function(e,t,n){e.exports=n.p+"static/media/jest_test_initial.fa0b7085.png"},function(e,t,n){e.exports=n.p+"static/media/manage_dns.1c26f25f.png"},function(e,t,n){e.exports=n.p+"static/media/no_indexjs.e2f8375f.png"},function(e,t,n){e.exports=n.p+"static/media/npm_init_sass.00196d33.png"},function(e,t,n){e.exports=n.p+"static/media/ns_soa_records.c8a45ac2.png"},function(e,t,n){e.exports=n.p+"static/media/refresh_records.888dc0d9.png"},function(e,t,n){e.exports=n.p+"static/media/route53_get_started.0645f610.png"},function(e,t,n){e.exports=n.p+"static/media/search_route53.7767d5e8.png"},function(e,t,n){e.exports=n.p+"static/media/search_s3.22ba40bb.png"},function(e,t,n){e.exports=n.p+"static/media/sw_upload_files.493f200c.png"},function(e,t,n){e.exports=n.p+"static/media/w4s_packagejson.b769773f.png"},function(e,t,n){e.exports=n.p+"static/media/wds_inmemory_files.b7749752.png"},function(e,t,n){},function(e,t,n){},function(e,t,n){},function(e,t,n){"use strict";n.r(t);var s=n(0),o=n.n(s),a=n(22),i=n.n(a),r=(n(33),n(2)),c=n(6),l=n(8),d=n(7),p=n(9),m=n(10),u=n(11),h=(n(34),function(e){return o.a.createElement("header",{className:"header"},o.a.createElement("a",{href:"/"},o.a.createElement("img",{src:n(19),alt:"monjit nunisa logo",className:"header__logo"})),o.a.createElement("a",{href:"/"},o.a.createElement("span",{className:"header__text"},"Monjit Nunisa")))}),g=n(23),f=n.n(g),b=(n(35),function(e){function t(){return Object(r.a)(this,t),Object(l.a)(this,Object(d.a)(t).apply(this,arguments))}return Object(p.a)(t,e),Object(c.a)(t,[{key:"render",value:function(){return o.a.createElement("div",{className:"notfound"},o.a.createElement("header",{className:"notfound-header"},o.a.createElement("img",{src:f.a,className:"notfound-logo",alt:"logo"}),o.a.createElement("p",null,"OMG! I'm still spinning hard to serve your request...")))}}]),t}(s.Component)),_=(n(36),function(e){return o.a.createElement("main",{className:"wrapper"},o.a.createElement("section",{className:"content pt-15"},e.children))}),y=(n(37),function(e){return o.a.createElement("footer",{className:"footer"},o.a.createElement("p",null,"Since 2019 \xa9 nunisa"),o.a.createElement("p",null,"Powered by ",o.a.createElement("button",null,"blogengg")))}),w=(n(38),function(e){var t=e.title,n=e.publishedOn,s=e.isAtHome,a=n.replace(/\//g,""),i=n.split("/").reverse().join("/"),r=t.replace(/\(|\)/g,"").replace(/ /g,"-").toLowerCase(),c="01012052"===a?"/t/b/d/".concat(r):"/".concat(i,"/").concat(r),l=new Date(i),d="".concat(["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"][l.getMonth()]," ").concat(l.getDate(),", ").concat(l.getFullYear());return o.a.createElement(o.a.Fragment,{key:n},s?"01012052"===a?o.a.createElement(o.a.Fragment,null,o.a.createElement(m.b,{key:n,to:c},t," ",o.a.createElement("span",{className:"publishing-soon"},"(Publishing soon...)"))):o.a.createElement(m.b,{key:n,to:c},t):o.a.createElement("h5",null,t),o.a.createElement("p",{className:"p-text--title"},o.a.createElement("small",null,"01012052"===a?"":"Published on ".concat(d))))}),x=(n(47),function(e){return o.a.createElement("div",{className:"hline mt-30"},o.a.createElement("div",{className:"line bb-2"}))}),j=function e(){Object(r.a)(this,e),this.charInterpreter=function(e){for(var t=[],n=[],s=[],o=0;o<e.length;o++){if("*"===e[o])"**"===e[o]+""+e[o+1]&&t.push(o);else"`"===e[o]?n.push(o):"["!==e[o]&&"]"!==e[o]||s.push(o)}for(var a=["*","`","[","]"],i="",r=0;r<e.length;r++){if(t.includes(r)&&t.indexOf(r)%2===0?(i+="<strong>",r++):t.includes(r)&&(i+="</strong>",r++),n.includes(r)&&n.indexOf(r)%2===0?i+="<code>":n.includes(r)&&(i+="</code>"),s.includes(r)&&s.indexOf(r)%2===0){var c=e.substring(r+1),l=c.indexOf("]"),d=c.indexOf(")"),p=c.substring(l+2,d);i+='<a href="'.concat(p,'" target="_blank">')}else if(s.includes(r)){i+="</a>";var m=e.substring(r+2).indexOf(")");r+=e.substring(2,m).length+4;continue}a.includes(e[r])||(i+=e[r])}return decodeURIComponent(encodeURIComponent(i))}},v=(n(48),function(e){return o.a.createElement(m.b,{className:"btn-inline--link",to:e.redirectedURL},"Read More",o.a.createElement("span",null,"\u2192"))}),k=(n(49),new j),S=function(e){function t(){return Object(r.a)(this,t),Object(l.a)(this,Object(d.a)(t).apply(this,arguments))}return Object(p.a)(t,e),Object(c.a)(t,[{key:"render",value:function(){var e=this.props,t=e.descriptions,n=e.redirectedURL,s=e.isAtHome,a=e.postIndex,i=e.publishedOn,r=s?t.slice(0,1):t;return o.a.createElement(o.a.Fragment,null,r.map(function(e,t){return"01012052"!==i.replace(/\//g,"")?o.a.createElement("p",{className:s?"p-text-".concat(a):"p-text",key:"".concat(t,"-d")}):null}),s&&"01012052"!==i.replace(/\//g,"")?o.a.createElement(v,{redirectedURL:n}):null)}},{key:"componentDidMount",value:function(){var e=this.props,t=e.postIndex,n=e.descriptions,s=e.isAtHome,o=e.publishedOn;(s?n.slice(0,1):n).forEach(function(e,n){"01012052"!==o.replace(/\//g,"")&&(s?document.getElementsByClassName("p-text-".concat(t))[n].innerHTML=k.charInterpreter(e):document.getElementsByClassName("p-text")[n].innerHTML=k.charInterpreter(e))})}}]),t}(s.Component),E={tech_posts:[{title:"How to host a static website on AWS S3",published_on:"30/03/2019",descriptions:["In this post, I have cut out all the `TL;DRs` (available out there) and listed all the steps, that I followed and think, are very easy and simple to follow to make your website up and running quickly."],steps:[{text:"Log into [AWS Management Console](https://console.aws.amazon.com/) and search for **S3** by clicking on **Services**. Click on the S3.",media_type:"img",media_src:"search_s3.png"},{text:"Click on **Create bucket** button.",media_type:"img",media_src:"create_bucket.png"},{text:"A Create bucket dialog will be opened. Enter a unique **Bucket name** (the bucket name must be same as your domain name, i.e. bucket name must be `example.com` if domain name is `example.com`). Keep default option selected for **Region** (if you do not have any specific AWS region preference) and leave the **Copy settings from an existing bucket** (optional) field blank.",media_type:"img",media_src:"create_bucket_dialog.png"},{text:"Choose **Next** and keep default values until you reach the **Set permissions** tab. In this, uncheck both the values under **Manage public bucket policies for this bucket** (i.e. 1. Block new public bucket policies (Recommended) 2. Block public and cross-account access if bucket has public policies (Recommended)).",media_type:"img",media_src:"create_bucket_permissions.png"},{text:"On the **Review** tab, verify the settings. You can edit your settings here (if any). Click on **Create bucket** button.",media_type:"img",media_src:"create_bucket_review.png"},{text:"Now, click on the created bucket (let\u2019s say, `example.com`) and open **Properties** tab and choose **Static Website Hosting** card. Choose **Use this bucket to host a website**, type index.html in **Index document** text box and enter **Error document** (optional). Choose **Save**.",media_type:"img",media_src:"bucket_properties.png"},{text:"Write down the **Endpoint**.",media_type:"",media_src:""},{text:"Now, open **Permissions** tab and choose **Bucket Policy**.",media_type:"img",media_src:"bucket_policy.png"},{text:"Copy the following bucket policy, and then paste it in the **Bucket Policy Editor**. Replace example.com with the name of your bucket. Choose **Save**.",media_type:"code_js",media_src:'\n                        {\n                            "Version": "2012-10-17",\n                            "Statement": [\n                                {\n                                    "Sid": "PublicReadGetObject",\n                                    "Effect": "Allow",\n                                    "Principal": "*",\n                                    "Action": "s3:GetObject",\n                                    "Resource": "arn:aws:s3:::example.com/*"\n                                }\n                            ]\n                        }\n                    '},{text:"Now is the right time to upload your static website. To do this, go back to the main bucket listing. Assuming that you have a ready to upload website in the following directory structure.",media_type:"code",media_src:"\n                        my-app/\n                            |--- css/\n                            |      |--- style.css\n                            |--- images/\n                            |      |--- favicon.ico\n                            |\t   |--- brand.png\n                            |--- index.html    \n                    "},{text:"Click on the **Upload** button. Drag and drop or select \u201cAdd files\u201d, and add the entire static website directory. Then, click **Upload** button to upload the files.",media_type:"img",media_src:"sw_upload_files.png"},{text:"Once the upload is done, validate your website by typing `example.com` on the browser. The content of your static website will be loaded from the **S3 bucket**.",media_type:"",media_src:""},{text:"If you are worried about charges for the services used for your application, you can read more about [S3 Pricing](https://aws.amazon.com/s3/pricing/) and [Route53 Pricing](https://aws.amazon.com/route53/pricing/).",media_type:"",media_src:""}]},{title:"How to migrate a domain to Amazon Route53",published_on:"31/03/2019",descriptions:["This post solves the million\u2019s query of how to migrate a domain registered with [Godaddy](https://in.godaddy.com/) to [Amazon Route53](https://console.aws.amazon.com/route53/). So here, we will use a freshly registered domain so that all the requests to the said domain would resolve to Route53 which is pointing to [Amazon S3](https://console.aws.amazon.com/s3/) bucket where a static website is hosted.","For your convenience, I would suggest you keep at least two browser tabs opened for Amazon Route53 and Godaddy because we will be frequently switching the tabs back and forth during the whole process."],steps:[{text:"Log into [AWS Management Console](https://console.aws.amazon.com/) and search for **Route53** on the landing page. Click on the service name.",media_type:"img",media_src:"search_route53.png"},{text:"Click on the **Get Started Now** under the **DNS Management section**.",media_type:"img",media_src:"route53_get_started.png"},{text:"Click on the **Create Hosted Zone** button.",media_type:"img",media_src:"create_hosted_zone.png"},{text:"A form dialog will show up on the right panel. Enter your domain name (i.e. without www) and an optional description. Keep the `Public Hosted Zone` selected. Click on the **Create** button.",media_type:"img",media_src:"create_hosted_zone_pane.png"},{text:"Once create is successful, you will see the zone details, `NS` and `SOA` record set. Explore various [DNS record set types](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/ResourceRecordTypes.html).",media_type:"img",media_src:"ns_soa_records.png"},{text:"Now is the time to add the record sets from Godaddy to this hosted zone. So, open a new browser tab and login to [Godaddy](https://in.godaddy.com/), click on your username to see **Manage Domains** option, click on it to go to domains listing. Then, click on the triple context menu and then, click on Manage DNS under the domain name that you want to move.",media_type:"img",media_src:"manage_dns.png"},{text:"Go to **Advanced Features** section by scrolling all the way down. Click on the link that says **Export Zone File (Unix)**.",media_type:"img",media_src:"advanced_features.png"},{text:"Check that a file `your_domain_name.txt` has been downloaded. Open that file any text editor.",media_type:"",media_src:""},{text:"Now, go back to the **Route53** page and click on the **Import Zone File** button. A form dialog will show up on the right panel. Copy and paste the contents of the `your_domain_name.txt` file in the form and click **Import** button.",media_type:"",media_src:""},{text:"Click on the refresh button or just refresh your browser to see the imported record sets in the hosted zone. These record sets have been imported from the Godaddy zone file.",media_type:"img",media_src:"refresh_records.png"},{text:"Now, go back to Godaddy page to update **Name Servers**. Go to **Nameservers** section just above the Advanced Features.",media_type:"img",media_src:"godaddy_nameservers.png"},{text:"Click on the **Change** button.",media_type:"",media_src:""},{text:"Select the **Custom** option.",media_type:"img",media_src:"godaddy_custom.png"},{text:"Go back to the **Route53** page, click on the **Back to Hosted Zones**, click on the radio button on the left of your hosted zone name. A **Hosted Zone Details** will be shown on the right. Notice the **Name Servers** listed (i.e. 4 Nameservers).",media_type:"img",media_src:"hosted_zone_nameservers.png"},{text:"Copy and paste the **Name Servers** as listed one by one in the Godaddy custom list. Add two more rows by clicking on the **Add Nameserver** button. Then, click **Save**.",media_type:"img",media_src:"custom_nameservers.png"},{text:"Go back to the **Route53** page, click on the **Services** button and search for **S3**. Then, select the service name.",media_type:"img",media_src:"search_s3.png"},{text:"Click on the S3 bucket name with your domain name. Then, select **Properties** tab.",media_type:"img",media_src:"bucket_properties.png"},{text:"Click on the **Static website hosting** card and copy the link given in **Endpoint**.",media_type:"",media_src:""},{text:"Go back to **Route53** page and select your hosted zone name. From the record sets, choose the one with **Type A**. Edit Record Set form panel will be opened on the right.",media_type:"img",media_src:"edit_typeA_record.png"},{text:"Change **Alias** to **Yes**.",media_type:"",media_src:""},{text:"Paste the link copied in step #18 in **Alias Target** field. Then, click on the **Save Record Set**.",media_type:"",media_src:""},{text:"That\u2019s all! Wait for few minutes. Meanwhile, you can perform a DNS lookup for the availability of the name servers at <link www.whatsmydns.net />. Also, you can try entering your domain name in the browser and see if it shows the correct content. You should see your website up and running (if everything is done correctly).",media_type:"",media_src:""},{text:"If you are worried about charges for the services used for your application, you can read more about [S3 Pricing](https://aws.amazon.com/s3/pricing/) and [Route53 Pricing](https://aws.amazon.com/route53/pricing/).",media_type:"",media_src:""}]},{title:"How to start a SASS project",published_on:"07/04/2019",descriptions:["I still remember the day I wanted to start writing [SASS](https://sass-lang.com/guide) code and use in my project. As usual, I googled around and got lost in the sea of results and then, guess what, I wandered around many solutions. So, in this post, I have simplified and summarized all my readings and presented to you in a very easy to follow along order. But, if you are in a hurry, like me, please get my [sass-starter](https://github.com/nunisa/sass-starter) boilerplate and start building on top of it.","We'll use **Terminal** (or **Command Prompt** in windows) during the whole process (Trust me, it's easy)."],steps:[{text:"Create project directory, let's say, **sass-starter** with `**mkdir sass-starter**` command. Then, change the directory to **sass-starter** with `**cd sass-starter**` command.",media_type:"img",media_src:"create_sass_starter.png"},{text:"Create [package.json](https://docs.npmjs.com/creating-a-package-json-file) with `**npm init**` command. Keep hitting `Enter` (or `return` for mac) key to proceed and type **yes** at last to complete the process.",media_type:"img",media_src:"npm_init_sass.png"},{text:"Add `index.html`, `css` and `sass` folder to hold css and sass files respectively (for bigger sass projects, you can use [7-1 sass architecture](https://sass-guidelin.es/#architecture)). Your final project scaffolding should look like as shown below.",media_type:"code",media_src:"\n                        sass-starter/\n                            |--- css/\n                            |      |--- style.css\n                            |\n                            |--- images/\n                            |      |--- favicon.ico\n                            |\t   |--- brand.png\n                            |\n                            |--- sass/\n                            |      |--- main.scss\n                            |\n                            |--- index.html\n                            |--- .gitignore\n                            |--- package.json\n                    "},{text:"Add `.gitignore` file at the project root level. It specifies intentionally untracked files to ignore. A generic .gitignore file should look like as shown below.",media_type:"code_js",media_src:"\n                        # dependencies\n                        /node_modules\n                        /.pnp\n                        .pnp.js\n                        \n                        # testing\n                        /coverage\n                        \n                        # production\n                        /build\n                        \n                        # misc\n                        .DS_Store\n                        .env.local\n                        .env.development.local\n                        .env.test.local\n                        .env.production.local\n                        \n                        npm-debug.log*\n                        yarn-debug.log*\n                        yarn-error.log*                    \n                    "},{text:"Let's install the required dependency modules. 1. `node` - Node.js\xae is a JavaScript runtime built on Chrome's V8 JavaScript engine, 2. `live-server` - a little development server with live reload capability, i.e. specifically for hacking your HTML/JavaScript/CSS files. To do this, [install node here](https://nodejs.org/en/download/) and for live-server, run the following command.",media_type:"code_js",media_src:"\n                        npm i -g live-server\n                    "},{text:"And for the rest, 1. `npm-run-all` - CLI tool to run multiple npm-scripts in parallel, 2. `node-sass` - to compile `.scss` files to `.css`, run the following command.",media_type:"code_js",media_src:"\n                        npm i -S npm-run-all node-sass\n                    "},{text:"Let's add some automation scripts which would compile the SASS codes in `main.scss` file and output it to `style.css` and then watch the changes made in SASS files so that we do not have to recompile time and again. In `package.json`, add the following scripts inside the `scripts` block.",media_type:"code_js",media_src:'\n                        "watch:sass": "node-sass sass/main.scss css/style.css -w",\n                        "start:server": "live-server --port=6060",\n                        "start": "npm-run-all --parallel start:server watch:sass"\n                    '},{text:"Now, write some code in `main.scss`. Once done, run `npm start` to fire up your application. It'll run the development server at port `6060` and produce `style.css` file simultaneously. Include the `style.css` in `index.html` to see the CSS changes done.",media_type:"",media_src:""},{text:"That's all folks! Your SASSY application runs at `http://127.0.0.1:6060/` or `http://localhost:6060/`.",media_type:"",media_src:""}]},{title:"How to do production ready webpack 4 configuration from scratch",published_on:"11/05/2019",descriptions:["In this post, I'll show you how to do a production ready webpack 4 configuration. For ease of follow through, till the end, the configurations done are shown in a step by step manner. Also, an effort has been made to carry along the beginners too, with the experienced ones, without much reading of the [wepback official documentation](https://webpack.js.org/concepts).","I'll also demystify the zero config claim of webpack 4 and some of its new cool features along the way. So, guys, please stick around and read the **ASIDE** points carefully as you encounter it for the answers you seek.","But **Good news** for those who are in a hurry and just want to read without typing along all of the steps, I've already got the [boilerplate](https://github.com/nunisa/webpack-starter.git) ready!"],steps:[{text:"Create project folder, **webpack-4-starter** by running the command",media_type:"code_js",media_src:"\n                        mkdir webpack-4-starter && cd $_\n                    "},{text:"Initialize [package.json](https://docs.npmjs.com/creating-a-package-json-file) by running the command `npm init -y` (keeping everything default). And at this point, your `package.json` should look like",media_type:"img",media_src:"w4s_packagejson.png"},{text:"Let's install our first dependency modules, `webpack` and [webpack-cli](https://github.com/webpack/webpack-cli). Open package.json and make sure that the webpack v4 is installed else you can explicitly specify the version in `devDependencies`.",media_type:"code_js",media_src:"\n                        npm i -D webpack webpack-cli\n                    "},{text:"At this point, your project scaffolding should look like (**Ignore** node_modules and package-lock.json)",media_type:"code",media_src:"\n                        webpack-4-starter/\n                            |--- node_modules\n                            |--- package-lock.json\n                            |--- package.json\n                    "},{text:"Now, let's add [npm](https://www.npmjs.com/) scripts in package.json. Save the changes.",media_type:"code_js",media_src:'\n                        "scripts": {\n                            "build": "webpack"\n                        }\n                    '},{text:"Try to run the `build` script by running the command `npm run build`. And, you would most likely see the error",media_type:"img",media_src:"no_indexjs.png"},{text:"**ASIDE:** This means webpack is looking for a folder **src** with an `index.js` file. This is a default behaviour of webpack 4 since it requires zero configuration. It will take `./src/index.js` as the default entry point. The **entry point** is the file webpack looks for to start building your JS bundle.",media_type:"",media_src:""},{text:"Add **src** folder and an `index.js` file in it (for now, we'll ignore the warning about `\"mode\"` which we'll cover in later steps). At this point, your project scaffolding should look like",media_type:"code",media_src:"\n                        webpack-4-starter/\n                            |--- node_modules\n                            |\n                            |--- src/\n                            |      |--- index.js\n                            |\n                            |--- package-lock.json\n                            |--- package.json\n                    "},{text:"Let's put some code in `./src/inde.js`.",media_type:"code_js",media_src:"\n                        console.log(`Today is a beautiful day!`);\n                    "},{text:"Let's run the `build` command again. As soon as you do that, you'll get the bundle in `./dist/main.js`. That means, everything works as expected. But what just happened? Don't we need to specify the **output** file?",media_type:"code_js",media_src:"\n                        npm run build\n                    "},{text:"**ASIDE:** This is a default behaviour of webpack 4 since it requires zero configuration. It will output the bundle, `main.js`, in **dist** folder and assumes `./dist/main.js` as default output path. So, what we've got here, in **webpack 4 there is no need to define neither the entry point, nor the output file**.",media_type:"",media_src:""},{text:"At this point, your project scaffolding should look like",media_type:"code",media_src:"\n                        webpack-4-starter/\n                            |--- node_modules\n                            |--- dist/\n                            |      |--- main.js\n                            |\n                            |--- src/\n                            |      |--- index.js\n                            |\n                            |--- package-lock.json\n                            |--- package.json\n                    "},{text:"**ASIDE:** Having 2 configuration files is a common practice in webpack, especially in big projects. Usually you would have one file for development and one for production. In webpack 4, you have **modes**: `production` and `development`. That eliminates the need for having two files (for medium-sized projects). **Production mode** enables all sorts of optimizations out of the box. Including minification, scope hoisting, tree-shaking and more whereas **Development mode** on the other hand is optimized for speed and does nothing more than providing an un-minified bundle.",media_type:"",media_src:""},{text:"So, let's modify the scripts in package.json and use both the **modes**.",media_type:"code_js",media_src:'\n                        "scripts": {\n                            "dev": "webpack --mode development",\n                            "build": "webpack --mode production"\n                        }\n                    '},{text:"Now, if you run `dev` script and take a look at `./dist/main.js` file, you would see an un-minified bundle.",media_type:"code_js",media_src:"\n                        npm run dev\n                    "},{text:"But, if you run `build` script and take a look at `./dist/main.js` file, you would see minified bundle.",media_type:"code_js",media_src:"\n                        npm run build\n                    "},{text:"**Ready!** Now, let's get our hands dirty with more configurations and **override** the defaults and do everything of our own. So, create `index.html`, add **config** folder and **webpack** folder in it. Create `common.config.js`, `dev.config.js` and `prod.config.js` files in webpack folder. At this point, your project scaffolding should look like",media_type:"code",media_src:"\n                        webpack-4-starter/\n                            |--- node_modules\n                            |--- config/\n                            |       |--- webpack\n                            |              |--- common.config.js\n                            |              |--- dev.config.js\n                            |              |--- prod.config.js\n                            |\n                            |--- dist/\n                            |--- src/\n                            |      |--- index.js\n                            |\n                            |--- index.html\n                            |--- package-lock.json\n                            |--- package.json\n                    "},{text:"**ASIDE:** We're keeping all the configurations in **config**, and **webpack** folder contains its corresponding configurations. It's a detour, meaning by default webpack looks for configuration file `webpack.config.js` in root folder. As name suggests, `common.config.js` contains common and `dev.config.js` and `prod.config.js` contains development and production **environment** configurations respectively. `index.html` is used as an HTML template to serve our webpack bundles.",media_type:"",media_src:""},{text:"Modify package.json scripts with the below code. So, we'll use `start` to run server and create development bundles, `build` to create production bundles and `clean` to delete the **dist** folder in each `build` command.",media_type:"code_js",media_src:'\n                        "scripts": {\n                            "start": "cross-env NODE_ENV=development webpack-dev-server --config config/webpack/dev.config.js --colors --progress",\n                            "build": "npm run clean && cross-env NODE_ENV=production webpack --config config/webpack/prod.config.js --colors --progress",\n                            "clean": "rimraf dist"\n                        }\n                    '},{text:"Let's install the required modules, `webpack-dev-server`, `cross-env` and `webpack-merge` as **devDependencies**.",media_type:"code_js",media_src:"\n                        npm i -D webpack-dev-server cross-env webpack-merge\n                    "},{text:"And `rimraf`, `path`, `core-js` and `regenerator-runtime` as **dependencies**.",media_type:"code_js",media_src:"\n                        npm i -S rimraf path core-js regenerator-runtime\n                    "},{text:"**ASIDE:** [webpack-dev-server](https://github.com/webpack/webpack-dev-server) is used to fire up development server and get the feel of live application in development only. [cross-env](https://github.com/kentcdodds/cross-env) is used to set `NODE_ENV` variable. `merge.smart` of [webpack-merge](https://github.com/survivejs/webpack-merge) is used to merge configs smartly. [path](https://github.com/jinder/path) is used for working with file and directory paths. [core-js](https://github.com/zloirock/core-js) is used to include all the polyfills of [ECMAScript](https://en.wikipedia.org/wiki/ECMAScript) upto 2019. It should be loaded only once, so it is passed as an entry point. [regenerator-runtime](https://github.com/facebook/regenerator/tree/master/packages/regenerator-runtime) is used to support generators and async functions and it is loaded once as an entry point to ensure that `regeneratorRuntime` is defined globally.",media_type:"",media_src:""},{text:"So, at first, we'll configure all the common configs which are applicable in both the **modes**. Open `common.config.js`. We'll start by adding following code",media_type:"code_js",media_src:"\n                        module.exports.DIRS = {};\n                        \n                        module.exports.common = {};\n                    "},{text:"**ASIDE:** `DIRS` is an object to store all the directory paths and `common` is an object to store all the common webpack configs.",media_type:"",media_src:""},{text:"Define `context`, `entry` point, `output` bundle file path and `devTool` for source mapping.",media_type:"code_js",media_src:"\n                        const path = require('path');\n\n                        const SRC_DIR = path.resolve('./src');\n                        const DIST_DIR = path.resolve('./dist');\n\n                        module.exports.DIRS = {\n                            DIST_DIR\n                        };\n                        \n                        module.exports.common = {\n                            context: SRC_DIR,\n                            entry: [\n                                'core-js/stable',\n                                'regenerator-runtime/runtime',\n                                SRC_DIR + 'index.js'\n                            ],\n                            output: {\n                                filename: 'js/[name].[hash:8].js',\n                                chunkFilename: 'js/[name].[chunkhash:8].js',\n                                path: DIST_DIR,\n                                publicPath: '/'\n                            },\n                            devtool: (process.env.NODE_ENV === 'production') ? 'source-map' : 'eval-source-map'\n                        };\n                    "},{text:"**ASIDE:** [context](https://webpack.js.org/configuration/entry-context) is defined to make sure that our configs is independent of **CWD** (current working directory) while resolving entry points and loaders. [entry](https://webpack.js.org/configuration/entry-context) is the point or points to enter the application. At this point the application starts executing. [output](https://webpack.js.org/configuration/output) is a set of options instructing webpack on how and where it should output your bundles, assets and anything else you bundle or load with webpack. So, our context and entry points refer to **src** folder and output is **dist** with **js** and **css** subfolder to store all `js` and `css` bundles respectively. `devtool` is used to enable [source map](https://webpack.js.org/configuration/devtool). It's extremely helpful for debugging. At this point, our **dist** folder will look like",media_type:"code",media_src:"\n                        webpack-4-starter/\n                            |--- dist/\n                            |      |--- js\n                            |      |     |--- main.xxxxxxxx.js\n                            |      |\n                            |      |--- index.html\n                    "},{text:"Define some common `plugins`. Let's install `html-webpack-plugin` as **devDependencies**.",media_type:"code_js",media_src:"\n                        npm i -D html-webpack-plugin\n                    "},{text:"**ASIDE:** [html-webpack-plugin](https://github.com/jantimon/html-webpack-plugin) is used to create HTML files to serve our webpack bundles.",media_type:"code_js",media_src:"\n                        const path = require('path');\n                        const HtmlWebpackPlugin = require('html-webpack-plugin');\n\n                        const HTML_TEMPLATE = path.resolve('./index.html');\n                        const SRC_DIR = path.resolve('./src');\n                        const DIST_DIR = path.resolve('./dist');\n\n                        module.exports.DIRS = {\n                            DIST_DIR\n                        };\n                        \n                        module.exports.common = {\n                            context: SRC_DIR,\n                            entry: [\n                                'core-js/stable',\n                                'regenerator-runtime/runtime',\n                                SRC_DIR + 'index.js'\n                            ],\n                            output: {\n                                filename: 'js/[name].[hash:8].js',\n                                chunkFilename: 'js/[name].[chunkhash:8].js',\n                                path: DIST_DIR,\n                                publicPath: '/'\n                            },\n                            plugins: [\n                                new HtmlWebpackPlugin({\n                                    template: HTML_TEMPLATE,\n                                    filename: 'index.html',\n                                    title: 'Webpack 4 Starter'\n                                })\n                            ],\n                            devtool: (process.env.NODE_ENV === 'production') ? 'source-map' : 'eval-source-map'\n                        };\n                    "},{text:"Let's merge the common configs with the production configs. For that, open `prod.config.js` and add the code",media_type:"code_js",media_src:"\n                        const merge = require('webpack-merge');\n                        const commonConfig = require('./common.config');\n                        \n                        const { common } = commonConfig;\n                        \n                        module.exports = merge.smart(common, {});                    \n                    "},{text:"Define `mode` and `NODE_ENV`.",media_type:"code_js",media_src:"\n                        const webpack = require('webpack');\n                        const merge = require('webpack-merge');\n                        const commonConfig = require('./common.config');\n                        \n                        const { common } = commonConfig;\n                        \n                        module.exports = merge.smart(common, {\n                            mode: 'production',\n                            plugins: [\n                                new webpack.DefinePlugin({\n                                    'process.env.NODE_ENV': '\"production\"'\n                                })\n                            ]\n                        });                    \n                    "},{text:"**ASIDE:** [mode](https://webpack.js.org/configuration/mode) is used to tell webpack to do optimizations in development and production accordingly. [DefinePlugin](https://webpack.js.org/plugins/define-plugin/) is used to create global constants, like `NODE_ENV` an [environment variable](https://en.wikipedia.org/wiki/Environment_variable), at compile time for allowing different behavior between development builds and production builds.",media_type:"",media_src:""},{text:"At this point, the bundled code is not minified because we're overriding everything of webpack 4 with our own. To achieve it, let's install the required modules, `terser-webpack-plugin`, `uglifyjs-webpack-plugin` and `optimize-css-assets-webpack-plugin` as **devDependencies**.",media_type:"code_js",media_src:"\n                        npm i -D terser-webpack-plugin uglifyjs-webpack-plugin optimize-css-assets-webpack-plugin\n                    "},{text:"**ASIDE:** [terser-webpack-plugin](https://github.com/webpack-contrib/terser-webpack-plugin) and [uglifyjs-webpack-plugin](https://github.com/webpack-contrib/uglifyjs-webpack-plugin) are used to minify our JS bundle. [optimize-css-assets-webpack-plugin](https://github.com/NMFR/optimize-css-assets-webpack-plugin) is used to minimize/optimize CSS assets.",media_type:"",media_src:""},{text:"So, let's minify and do optimization of the bundle so that it's usable in production.",media_type:"code_js",media_src:"\n                        const webpack = require('webpack');\n                        const merge = require('webpack-merge');\n                        const TerserJSPlugin = require('terser-webpack-plugin');\n                        const UglifyJSPlugin = require('uglifyjs-webpack-plugin');\n                        const OptimizeCSSAssetsPlugin = require('optimize-css-assets-webpack-plugin');\n                        const commonConfig = require('./common.config');\n                        \n                        const { common } = commonConfig;\n                        \n                        module.exports = merge.smart(common, {\n                            mode: 'production',\n                            plugins: [\n                                new webpack.DefinePlugin({\n                                    'process.env.NODE_ENV': '\"production\"'\n                                })\n                            ],\n                            optimization: {\n                                minimizer: [\n                                    new TerserJSPlugin(),\n                                    new UglifyJSPlugin(),\n                                    new OptimizeCSSAssetsPlugin()\n                                ]\n                            }\n                        });                    \n                    "},{text:"**ASIDE:** `optimization.minimizer` is used to override the default minimizer. If your requirement is more advanced, please do [more optimization](https://webpack.js.org/configuration/optimization).",media_type:"",media_src:""},{text:"Now, if you run `npm run build` script, everything should work as it does before, and take a look at `./dist/js/main.xxxxxxxx.js` file, you would see minified bundle.",media_type:"",media_src:""},{text:"**Congratulations** to ourselves because our production configuration is ready. Now, we'll configure development **mode** configs. So, open `dev.config.js` and add the code",media_type:"code_js",media_src:"\n                        const merge = require('webpack-merge');\n                        const commonConfig = require('./common.config');\n                        \n                        const { DIRS, common } = commonConfig;\n                        const PORT = 9090;\n                        \n                        module.exports = merge.smart(common, {});\n                    "},{text:"**ASIDE:** `PORT` is a [port](https://webpack.js.org/configuration/dev-server#devserverport) number, default 9090, where our `localhost` server (which is `webpack-dev-server`) will listen to for requests.",media_type:"",media_src:""},{text:"Define `mode` and `NODE_ENV`.",media_type:"code_js",media_src:"\n                        const webpack = require('webpack');\n                        const merge = require('webpack-merge');\n                        const commonConfig = require('./common.config');\n                        \n                        const { DIRS, common } = commonConfig;\n                        const PORT = 9090;\n                        \n                        module.exports = merge.smart(common, {\n                            mode: 'development',\n                            plugins: [\n                                new webpack.DefinePlugin({\n                                    'process.env.NODE_ENV': '\"development\"'\n                                })\n                            ]\n                        });                    \n                    "},{text:"Define `devServer` to customize `webpack-dev-server` and to enable features like hot module replacement (HMR).",media_type:"code_js",media_src:"\n                        const webpack = require('webpack');\n                        const merge = require('webpack-merge');\n                        const commonConfig = require('./common.config');\n                        \n                        const { DIRS, common } = commonConfig;\n                        const { DIST_DIR } = DIRS;\n                        const PORT = 9090;\n                        \n                        module.exports = merge.smart(common, {\n                            mode: 'development',\n                            plugins: [\n                                new webpack.DefinePlugin({\n                                    'process.env.NODE_ENV': '\"development\"'\n                                }),\n                                new webpack.HotModuleReplacementPlugin()\n                            ],\n                            devServer: {\n                                contentBase: DIST_DIR,\n                                clientLogLevel: 'none',\n                                compress: true,\n                                historyApiFallback: true,\n                                hot: true,\n                                index: 'index.html',\n                                inline: true,\n                                open: true,\n                                host: '0.0.0.0',\n                                public: 'localhost:' + PORT,\n                                port: PORT\n                            }\n                        });                    \n                    "},{text:'**ASIDE:** [devServer](https://webpack.js.org/configuration/dev-server) is used to change the behavior of `webpack-dev-server` in various ways. `hot` is set to `"true"` and used in conjunction with [HotModuleReplacementPlugin](https://webpack.js.org/configuration/dev-server) to enable **Hot Module Replacement (HMR)** feature. `contentBase` is where the contents will be served from on requests and it\'s set to **DIST_DIR** folder. `clientLogLevel` is set to `"none"` to hide all the warning logs from browser console. `compress` is used to enable gzip compression of the resources. `historyApiFallback` is set to `"true"` to serve index.html for all 404 responses. `index` is the filename of an index file, e.g.: index.html. `inline` is set to `"true"` to enable inline mode and to support HMR and show build messages on browser console. `open` is set to `"true"` to open the application on the browser automatically on every `npm start` command. `host` is set to enable the server to externally accessible with domain IP or remote desktop VMs (virtual machines). `public` is the fallback URL. `PORT` is the port number of your choice on which the development server will listen to.',media_type:"",media_src:""},{text:"Now, if you run `start` script, everything should work as it does before and the development server would have run and opened [http://localhost:9090/](http://localhost:9090/) link on the default browser. But, you would not see any change in `./dist/js/main.xxxxxxxx.js` file, **why**?",media_type:"code_js",media_src:"\n                        npm start\n                    "},{text:"**ASIDE:** On `npm start`, since we're using `webpack-dev-server` the content is served from in-memory **dist** folder which has same structure as the visible **dist** folder present in the root. But to confirm it, open the [http://localhost:9090/webpack-dev-server](http://localhost:9090/webpack-dev-server) link on the default browser and see the following",media_type:"img",media_src:"wds_inmemory_files.png"},{text:"So far so good. But, at this point, we haven't considered JavaScript written in **ES6** or above which most developers love these days, and ES6 is not supported by all the browsers. So, we need to `transpile` it - a fancy word to **transform** ES6 code into **ES5**. We can use **babel** and webpack has **loaders** for that. To start using the loader we need to install a bunch of dependencies. Particularly, `@babel/core`, `@babel/preset-env` and `babel-loader`. And additionally, `@babel/plugin-syntax-dynamic-import`, `@babel/plugin-proposal-class-properties` and `babel-plugin-transform-es2015-modules-commonjs`.",media_type:"code_js",media_src:"\n                        npm i -D @babel/core @babel/preset-env babel-loader @babel/plugin-syntax-dynamic-import @babel/plugin-proposal-class-properties babel-plugin-transform-es2015-modules-commonjs\n                    "},{text:"**ASIDE:** [babel](https://babeljs.io/) is a JavaScript compiler which enable us to use next generation JavaScript today. [@babel/preset-env](https://babeljs.io/docs/en/babel-preset-env) is a preset that allows us to use the latest JavaScript. [babel-loader](https://github.com/babel/babel-loader) is a webpack loader for transpiling ES6 and above, down to ES5. [@babel/plugin-syntax-dynamic-import](https://babeljs.io/docs/en/next/babel-plugin-syntax-dynamic-import.html) is to support IE for `Promise`. [@babel/plugin-proposal-class-properties](https://github.com/babel/babel/tree/master/packages/babel-plugin-proposal-class-properties) is to transform static classes. [babel-plugin-transform-es2015-modules-commonjs](https://babeljs.io/docs/en/babel-plugin-transform-es2015-modules-commonjs) is used here to resolve issues in testing environment.",media_type:"",media_src:""},{text:"Let's configure `babel` by creating a new file `.babelrc`.",media_type:"code_js",media_src:'\n                        {\n                            "presets": [\n                                [\n                                    "@babel/preset-env",\n                                    {\n                                        "modules": false,\n                                        "useBuiltIns": "entry",\n                                        "corejs": {\n                                            "version": 3,\n                                            "proposals": true\n                                        }\n                                    }\n                                ]\n                            ],\n                            "plugins": [\n                                "@babel/plugin-syntax-dynamic-import",\n                                "@babel/plugin-proposal-class-properties",\n                                "transform-es2015-modules-commonjs"\n                            ]\n                        }\n                    '},{text:'**ASIDE:** `presets` is a set of plugins used to support latest JavaScript features. `@babel/preset-env` is customized to support `core-js@3` and ECMAScript experimental features by setting `corejs` options and is instructed not to transform to other modules by setting `modules` to `"false"`. [plugins](https://babeljs.io/docs/en/plugins) are like helpers to `babel`.',media_type:"",media_src:""},{text:"Now, let's configure `babel-loader`. Since it's common to both the **modes**, let's add it in `common.config.js`.",media_type:"code_js",media_src:"\n                        const path = require('path');\n                        const HtmlWebpackPlugin = require('html-webpack-plugin');\n\n                        const HTML_TEMPLATE = path.resolve('./index.html');\n                        const NODE_MODULES_DIR = path.resolve('./node_modules');\n                        const SRC_DIR = path.resolve('./src');\n                        const DIST_DIR = path.resolve('./dist');\n\n                        module.exports.DIRS = {\n                            DIST_DIR\n                        };\n                        \n                        module.exports.common = {\n                            context: SRC_DIR,\n                            entry: [\n                                'core-js/stable',\n                                'regenerator-runtime/runtime',\n                                SRC_DIR + 'index.js'\n                            ],\n                            output: {\n                                filename: 'js/[name].[hash:8].js',\n                                chunkFilename: 'js/[name].[chunkhash:8].js',\n                                path: DIST_DIR,\n                                publicPath: '/'\n                            },\n                            module: {\n                                rules: [\n                                    {\n                                        test: /\\.js$/,\n                                        use: [\n                                            {\n                                                loader: 'babel-loader',\n                                                options: {\n                                                    presets: [\n                                                        [\n                                                            '@babel/preset-env',\n                                                            {\n                                                                modules: false,\n                                                                useBuiltIns: 'entry',\n                                                                corejs: {\n                                                                    version: 3,\n                                                                    proposals: true\n                                                                }\n                                                            }\n                                                        ]\n                                                    ]\n                                                }\n                                            }\n                                        ]\n                                    }\n                                ]\n                            }\n                            plugins: [\n                                new HtmlWebpackPlugin({\n                                    template: HTML_TEMPLATE,\n                                    filename: 'index.html',\n                                    title: 'Webpack 4 Starter'\n                                })\n                            ],\n                            devtool: (process.env.NODE_ENV === 'production') ? 'source-map' : 'eval-source-map'\n                        };\n                    "},{text:"**ASIDE:** [module](https://webpack.js.org/configuration/module) option is used to determine how [different types of modules](https://webpack.js.org/concepts/modules) within a project will be treated. [rules](https://webpack.js.org/configuration/module#modulerules) is used to apply loaders to the module, or modify the parser. [test](https://webpack.js.org/configuration/module#ruletest) is a **RegExp** condition to be tested with the input and the condition must match to apply loader/rule. `babel-loader` is specified in `loader` option of [use](https://webpack.js.org/configuration/module#ruleuse) which is applied to modules. [options](https://webpack.js.org/configuration/module#ruleoptions--rulequery) is used to modify the babel-loader as its options. `@babel/preset-env` is configured here also as options to `babel-loader` because [this issue still exists](https://github.com/babel/babel/issues/7788).",media_type:"",media_src:""},{text:"Let's put some ES6 code in `./src/inde.js`.",media_type:"code_js",media_src:"\n                        console.log(`Today is a beautiful day!`);\n\n                        const arr = [1, 2, 3];\n                        const printNum = arr => {\n                            arr.forEach(num => {\n                                console.log(num);\n                            });\n                        };\n\n                        printNum(arr);\n                    "},{text:"Now, if you run `npm run build` script, everything should work as it does before, and take a look at `./dist/js/main.xxxxxxxx.js` file, you would see minified and **transpiled** bundle.",media_type:"",media_src:""},{text:"And also, on `npm start` script, everything should work as it does before. Please refer step **#43** for more details.",media_type:"",media_src:""},{text:"At this point, your project scaffolding should look like",media_type:"code",media_src:"\n                        webpack-4-starter/\n                            |--- node_modules\n                            |--- config/\n                            |       |--- webpack\n                            |              |--- common.config.js\n                            |              |--- dev.config.js\n                            |              |--- prod.config.js\n                            |\n                            |--- dist/\n                            |--- src/\n                            |      |--- index.js\n                            |\n                            |--- .babelrc\n                            |--- index.html\n                            |--- package-lock.json\n                            |--- package.json\n                    "},{text:"Now, let's configure to extract CSS to a file but webpack doesn't know how to do that. So, we'll use [mini-css-extract-plugin](https://github.com/webpack-contrib/mini-css-extract-plugin) which creates a CSS file per JS file which contains CSS. Along with `mini-css-extract-plugin`, we need `css-loader`, `postcss-loader`, `postcss-preset-env`, `sass-loader` and `node-sass`. To install as **devDependencies**, run the command",media_type:"code_js",media_src:"\n                        npm i -D mini-css-extract-plugin css-loader postcss-loader postcss-preset-env sass-loader node-sass\n                    "},{text:"Since it's common to both the **modes**, let's add it in `common.config.js`.",media_type:"code_js",media_src:"\n                        const path = require('path');\n                        const HtmlWebpackPlugin = require('html-webpack-plugin');\n                        const MiniCssExtractPlugin = require('mini-css-extract-plugin');\n\n                        const HTML_TEMPLATE = path.resolve('./index.html');\n                        const NODE_MODULES_DIR = path.resolve('./node_modules');\n                        const SRC_DIR = path.resolve('./src');\n                        const DIST_DIR = path.resolve('./dist');\n\n                        module.exports.DIRS = {\n                            DIST_DIR\n                        };\n                        \n                        module.exports.common = {\n                            context: SRC_DIR,\n                            entry: [\n                                'core-js/stable',\n                                'regenerator-runtime/runtime',\n                                SRC_DIR + 'index.js'\n                            ],\n                            output: {\n                                filename: 'js/[name].[hash:8].js',\n                                chunkFilename: 'js/[name].[chunkhash:8].js',\n                                path: DIST_DIR,\n                                publicPath: '/'\n                            },\n                            module: {\n                                rules: [\n                                    {\n                                        test: /\\.js$/,\n                                        use: [\n                                            {\n                                                loader: 'babel-loader',\n                                                options: {\n                                                    presets: [\n                                                        [\n                                                            '@babel/preset-env',\n                                                            {\n                                                                modules: false,\n                                                                useBuiltIns: 'entry',\n                                                                corejs: {\n                                                                    version: 3,\n                                                                    proposals: true\n                                                                }\n                                                            }\n                                                        ]\n                                                    ]\n                                                }\n                                            },\n                                        ]\n                                    },\n                                    {\n                                        test: /\\.(le|sa|sc|c)ss$/,\n                                        use: [\n                                            {\n                                                loader: MiniCssExtractPlugin.loader,\n                                                options: {\n                                                    sourceMap: true,\n                                                    hmr: (process.env.NODE_ENV === 'development'),\n                                                    reloadAll: true\n                                                }\n                                            },\n                                            {\n                                                loader: 'css-loader',\n                                                options: {\n                                                    sourceMap: true\n                                                }\n                                            },\n                                            {\n                                                loader: 'postcss-loader',\n                                                options: {\n                                                    ident: 'postcss',\n                                                    plugins: () => [\n                                                        require('postcss-preset-env')({ browsers: 'last 2 versions' })\n                                                    ],\n                                                    sourceMap: true\n                                                }\n                                            },\n                                            {\n                                                loader: 'sass-loader',\n                                                options: {\n                                                    sourceMap: true\n                                                }\n                                            }\n                                        ]\n                                    }\n                                ]\n                            },\n                            plugins: [\n                                new HtmlWebpackPlugin({\n                                    template: HTML_TEMPLATE,\n                                    filename: 'index.html',\n                                    title: 'Webpack 4 Starter'\n                                }),\n                                new MiniCssExtractPlugin({\n                                    filename: 'css/[name].[chunkhash:8].css',\n                                    chunkFilename: 'css/[name].[chunkhash:8].css'\n                                })\n                            ],\n                            devtool: (process.env.NODE_ENV === 'production') ? 'source-map' : 'eval-source-map'\n                        };\n                    "},{text:'**ASIDE:** [css-loader](https://github.com/webpack-contrib/css-loader) is used to resolve @import and url() found in CSS files and live reload is enabled by setting `hmr` option to `"true"` in development environment. [postcss-loader](https://github.com/postcss/postcss-loader) is used to process CSS with vendor prefixes. [postcss-preset-env](https://github.com/csstools/postcss-preset-env) is used to convert modern CSS into browser compatible forms. [sass-loader](https://github.com/webpack-contrib/sass-loader) is used to load a Sass/SCSS file and compiles it to CSS. It uses [node-sass](https://github.com/sass/node-sass) internally which is used to compile `.scss` files to `css`.',media_type:"",media_src:""},{text:"Let's put some CSS code by creating `index.css` in **src** folder.",media_type:"code_js",media_src:"\n                        * {\n                            margin: 0;\n                            padding: 0;\n                            font-size: 100%;\n                        }\n                        \n                        *, *::before, *::after {\n                            box-sizing: border-box;\n                        }\n\n                        body {\n                            display: flex;\n                            justify-content: center;\n                            align-items: center;\n                            height: 100vh;\n                            background-color: #001991;\n                            color: #fff;\n                            font-size: 5rem;\n                        }\n                    "},{text:"Now, if you run `npm run build` script, you would see that a new folder **css** is created inside **dist** folder and the `main.xxxxxxxx.css` file. But `./dist/css/main.xxxxxxxx.css` is minified CSS bundle.",media_type:"",media_src:""},{text:"And, on `npm start` script, the development server would have run. If inspect the browser and take a look in the head section, you would see that a CSS file is included with link tag automatically which is un-minified CSS bundle, by the way.",media_type:"",media_src:""},{text:"At this point, your project scaffolding should look like",media_type:"code",media_src:"\n                        webpack-4-starter/\n                            |--- node_modules\n                            |--- config/\n                            |       |--- webpack\n                            |              |--- common.config.js\n                            |              |--- dev.config.js\n                            |              |--- prod.config.js\n                            |\n                            |--- dist/\n                            |      |--- js\n                            |      |     |--- main.xxxxxxxx.js\n                            |      |\n                            |      |--- css\n                            |      |     |--- main.xxxxxxxx.css\n                            |      |\n                            |      |--- index.html\n                            |\n                            |--- src/\n                            |      |--- index.js\n                            |      |--- index.css\n                            |\n                            |--- .babelrc\n                            |--- index.html\n                            |--- package-lock.json\n                            |--- package.json\n                    "},{text:"Now, let's add support to parse **images**, **fonts** and **csv**/**tsv**/**xml** files. To achieve that we need `file-loader`, `csv-loader` and `xml-loader`. To install as **devDependencies**, run the command",media_type:"code_js",media_src:"\n                        npm i -D file-loader csv-loader xml-loader\n                    "},{text:"**ASIDE:** [file-loader](https://github.com/webpack-contrib/file-loader) is used to resolve import/require() on a file into a url. [csv-loader](https://github.com/theplatapi/csv-loader) is used to convert data types. [xml-loader](https://github.com/gisikw/xml-loader) is used to load xml files.",media_type:"",media_src:""},{text:"Since it's common to both the **modes**, let's add it in `common.config.js`.",media_type:"code_js",media_src:"\n                        const path = require('path');\n                        const HtmlWebpackPlugin = require('html-webpack-plugin');\n                        const MiniCssExtractPlugin = require('mini-css-extract-plugin');\n\n                        const HTML_TEMPLATE = path.resolve('./index.html');\n                        const NODE_MODULES_DIR = path.resolve('./node_modules');\n                        const SRC_DIR = path.resolve('./src');\n                        const DIST_DIR = path.resolve('./dist');\n\n                        module.exports.DIRS = {\n                            DIST_DIR\n                        };\n                        \n                        module.exports.common = {\n                            context: SRC_DIR,\n                            entry: [\n                                'core-js/stable',\n                                'regenerator-runtime/runtime',\n                                SRC_DIR + 'index.js'\n                            ],\n                            output: {\n                                filename: 'js/[name].[hash:8].js',\n                                chunkFilename: 'js/[name].[chunkhash:8].js',\n                                path: DIST_DIR,\n                                publicPath: '/'\n                            }\n                            module: {\n                                rules: [\n                                    {\n                                        test: /\\.js$/,\n                                        use: [\n                                            {\n                                                loader: 'babel-loader',\n                                                options: {\n                                                    presets: [\n                                                        [\n                                                            '@babel/preset-env',\n                                                            {\n                                                                modules: false,\n                                                                useBuiltIns: 'entry',\n                                                                corejs: {\n                                                                    version: 3,\n                                                                    proposals: true\n                                                                }\n                                                            }\n                                                        ]\n                                                    ]\n                                                }\n                                            },\n                                        ]\n                                    },\n                                    {\n                                        test: /\\.(le|sa|sc|c)ss$/,\n                                        use: [\n                                            {\n                                                loader: MiniCssExtractPlugin.loader,\n                                                options: {\n                                                    sourceMap: true,\n                                                    hmr: (process.env.NODE_ENV === 'development'),\n                                                    reloadAll: true\n                                                }\n                                            },\n                                            {\n                                                loader: 'css-loader',\n                                                options: {\n                                                    sourceMap: true\n                                                }\n                                            },\n                                            {\n                                                loader: 'postcss-loader',\n                                                options: {\n                                                    ident: 'postcss',\n                                                    plugins: () => [\n                                                        require('postcss-preset-env')({ browsers: 'last 2 versions' })\n                                                    ],\n                                                    sourceMap: true\n                                                }\n                                            },\n                                            {\n                                                loader: 'sass-loader',\n                                                options: {\n                                                    sourceMap: true\n                                                }\n                                            }\n                                        ]\n                                    },\n                                    {\n                                        test: /\\.(png|svg|jpe?g|gif|ico|woff2?|eot|[ot]tf)$/,\n                                        use: ['file-loader']\n                                    },\n                                    {\n                                        test: /\\.(csv|tsv)$/,\n                                        use: ['csv-loader']\n                                    },\n                                    {\n                                        test: /\\.xml$/,\n                                        use: ['xml-loader']\n                                    }\n                                ]\n                            },\n                            plugins: [\n                                new HtmlWebpackPlugin({\n                                    template: HTML_TEMPLATE,\n                                    filename: 'index.html',\n                                    title: 'Webpack 4 Starter'\n                                }),\n                                new MiniCssExtractPlugin({\n                                    filename: 'css/[name].[chunkhash:8].css',\n                                    chunkFilename: 'css/[name].[chunkhash:8].css'\n                                })\n                            ],\n                            devtool: (process.env.NODE_ENV === 'production') ? 'source-map' : 'eval-source-map'\n                        };\n                    "},{text:"Let's test the **images** support by adding a nice `favicon` in our application. So, create **assets** folder and **images** folder in it. Download a favicon of your choice and put it in images folder (**Note:** for demo purpose, I've downloaded a `png` image). Now, if you run `build` script, you would see favicon is added in **dist** folder and on `npm start`, you would see your favicon displayed. So, the `favicon` option of `html-webpack-plugin` does it all for us. Just add the below code in their respective places.",media_type:"code_js",media_src:"\n                        const FAVICON_PATH = path.resolve('./assets/images/favicon.png');\n\n                        new HtmlWebpackPlugin({\n                            template: HTML_TEMPLATE,\n                            filename: 'index.html',\n                            title: 'Webpack 4 Starter',\n                            favicon: FAVICON_PATH\n                        }),\n                    "},{text:"**Final** project scaffolding should look like",media_type:"code",media_src:"\n                        webpack-4-starter/\n                            |--- node_modules\n                            |--- assets/\n                            |       |--- images\n                            |              |--- favicon.png\n                            |\n                            |--- config/\n                            |       |--- webpack\n                            |              |--- common.config.js\n                            |              |--- dev.config.js\n                            |              |--- prod.config.js\n                            |\n                            |--- dist/\n                            |      |--- js\n                            |      |     |--- main.xxxxxxxx.js\n                            |      |\n                            |      |--- css\n                            |      |     |--- main.xxxxxxxx.css\n                            |      |\n                            |      |--- favicon.png\n                            |      |--- index.html\n                            |\n                            |--- src/\n                            |      |--- index.js\n                            |      |--- index.css\n                            |\n                            |--- .babelrc\n                            |--- index.html\n                            |--- package-lock.json\n                            |--- package.json\n                    "},{text:"**ASIDE:** We'll add support for `resolve`, `bail`, `performance` and `stats`. [resolve](https://webpack.js.org/configuration/resolve) is used to customize how modules are resolved. [bail](https://webpack.js.org/configuration/other-options#bail) is set to `\"true\"` to stop on the first error itself. [performance](https://webpack.js.org/configuration/performance) option is set to show only performance related warnings. [stats](https://webpack.js.org/configuration/stats) is used to hide some of the bundle information logs. Since it's common to both the **modes**, let's add it in `common.config.js`.",media_type:"code_js",media_src:"\n                        const path = require('path');\n                        const HtmlWebpackPlugin = require('html-webpack-plugin');\n                        const MiniCssExtractPlugin = require('mini-css-extract-plugin');\n\n                        const HTML_TEMPLATE = path.resolve('./index.html');\n                        const NODE_MODULES_DIR = path.resolve('./node_modules');\n                        const SRC_DIR = path.resolve('./src');\n                        const DIST_DIR = path.resolve('./dist');\n\n                        module.exports.DIRS = {\n                            DIST_DIR\n                        };\n                        \n                        module.exports.common = {\n                            context: SRC_DIR,\n                            entry: [\n                                'core-js/stable',\n                                'regenerator-runtime/runtime',\n                                SRC_DIR + 'index.js'\n                            ],\n                            output: {\n                                filename: 'js/[name].[hash:8].js',\n                                chunkFilename: 'js/[name].[chunkhash:8].js',\n                                path: DIST_DIR,\n                                publicPath: '/'\n                            }\n                            module: {\n                                rules: [\n                                    {\n                                        test: /\\.js$/,\n                                        use: [\n                                            {\n                                                loader: 'babel-loader',\n                                                options: {\n                                                    presets: [\n                                                        [\n                                                            '@babel/preset-env',\n                                                            {\n                                                                modules: false,\n                                                                useBuiltIns: 'entry',\n                                                                corejs: {\n                                                                    version: 3,\n                                                                    proposals: true\n                                                                }\n                                                            }\n                                                        ]\n                                                    ]\n                                                }\n                                            },\n                                        ]\n                                    },\n                                    {\n                                        test: /\\.(le|sa|sc|c)ss$/,\n                                        use: [\n                                            {\n                                                loader: MiniCssExtractPlugin.loader,\n                                                options: {\n                                                    sourceMap: true,\n                                                    hmr: (process.env.NODE_ENV === 'development'),\n                                                    reloadAll: true\n                                                }\n                                            },\n                                            {\n                                                loader: 'css-loader',\n                                                options: {\n                                                    sourceMap: true\n                                                }\n                                            },\n                                            {\n                                                loader: 'postcss-loader',\n                                                options: {\n                                                    ident: 'postcss',\n                                                    plugins: () => [\n                                                        require('postcss-preset-env')({ browsers: 'last 2 versions' })\n                                                    ],\n                                                    sourceMap: true\n                                                }\n                                            },\n                                            {\n                                                loader: 'sass-loader',\n                                                options: {\n                                                    sourceMap: true\n                                                }\n                                            }\n                                        ]\n                                    },\n                                    {\n                                        test: /\\.(png|svg|jpe?g|gif|woff2?|eot|[ot]tf)$/,\n                                        use: ['file-loader']\n                                    },\n                                    {\n                                        test: /\\.(csv|tsv)$/,\n                                        use: ['csv-loader']\n                                    },\n                                    {\n                                        test: /\\.xml$/,\n                                        use: ['xml-loader']\n                                    }\n                                ]\n                            },\n                            plugins: [\n                                new HtmlWebpackPlugin({\n                                    template: HTML_TEMPLATE,\n                                    filename: 'index.html',\n                                    title: 'Webpack 4 Starter'\n                                }),\n                                new MiniCssExtractPlugin({\n                                    filename: 'css/[name].[chunkhash:8].css',\n                                    chunkFilename: 'css/[name].[chunkhash:8].css'\n                                })\n                            ],\n                            devtool: (process.env.NODE_ENV === 'production') ? 'source-map' : 'eval-source-map',\n                            resolve: {\n                                extensions: ['.wasm', '.mjs', '.js', '.jsx', '.json'],\n                                modules: [SRC_DIR, NODE_MODULES_DIR]\n                            },\n                            performance: {\n                                hints: 'warning'\n                            },\n                            stats: {\n                                warnings: false\n                            },\n                            bail: true\n                        };\n                    "},{text:"**That's all folks!** I really appreciate you for being so patient and following till here. This proves that we're equally **interested** in learning new things. **Recap:** Firstly, we've explored the default capabilities of webpack 4. Secondly, we've done our own production ready configuration from scratch. Last but not least, we've learnt new things from **ASIDE**s.",media_type:"",media_src:""},{text:"**References:** An effort has been made to explain all the terminologies here itself but for further details, please follow the **links** provided in **ASIDE**s or present all over this page. For more details, please read [webpack configuration](https://webpack.js.org/configuration).",media_type:"",media_src:""},{text:"**Next Up:** [React project setup](https://nunisa.github.io/2019/05/19/how-to-start-a-react-project). Read on!",media_type:"",media_src:""}]},{title:"How to easily configure a React project",published_on:"19/05/2019",descriptions:["In this post, I'll show you how to configure a react project. Since this is a continuation of previous post, [How to do production ready webpack 4 configuration from scratch](https://nunisa.github.io/2019/05/11/how-to-do-production-ready-webpack-4-configuration-from-scratch), we'll reuse everything from the post in here, add support for react and **JSX** syntax and modify few things. If you haven't read that post I would suggest you to check that out to get most out of it. For ease of follow through, till the end, the configurations done are shown in a step by step manner. Also, an effort has been made to carry along the beginners too, with the experienced ones, without much reading of the [react official documentation](https://reactjs.org/).","**Good news** for those who are in a hurry and just want to read without typing along all of the steps, I've already got the [boilerplate](https://github.com/nunisa/react-starter.git) ready!"],steps:[{text:"Clone into **react-starter** project folder from [webpack-starter](https://github.com/nunisa/webpack-starter.git) repository by running the command",media_type:"code_js",media_src:"\n                        git clone https://github.com/nunisa/webpack-starter.git react-starter\n                    "},{text:"Change directory to react-starter.",media_type:"code_js",media_src:"\n                        cd react-starter\n                    "},{text:"Install all the dependency modules at once.",media_type:"code_js",media_src:"\n                        npm i\n                    "},{text:"Now, install the react dependency modules, `react` and `react-dom` as **dependencies**.",media_type:"code_js",media_src:"\n                        npm i -S react react-dom\n                    "},{text:"**ASIDE:** [react](https://github.com/facebook/react/) is a JavaScript library for building user interfaces. [react-dom](https://reactjs.org/docs/react-dom.html) provides DOM-specific methods.",media_type:"",media_src:""},{text:"First, we need to inform [babel](https://babeljs.io/docs/en/) and [babel-loader](https://github.com/babel/babel-loader) in [webpack](https://webpack.js.org/concepts) to understand react and **JSX** syntax. So, let's install the module for it.",media_type:"code_js",media_src:"\n                        npm i -D @babel/preset-react\n                    "},{text:"Open `.babelrc` file and add the `presets` (a set of plugins used to support latest JavaScript features), `@babel/preset-react` in it.",media_type:"code_js",media_src:'\n                        {\n                            "presets": [\n                                [\n                                    "@babel/preset-env",\n                                    {\n                                        "modules": false,\n                                        "useBuiltIns": "entry",\n                                        "corejs": {\n                                            "version": 3,\n                                            "proposals": true\n                                        }\n                                    }\n                                ],\n                                "@babel/preset-react"\n                            ],\n                            "plugins": [\n                                "@babel/plugin-syntax-dynamic-import",\n                                "@babel/plugin-proposal-class-properties",\n                                "transform-es2015-modules-commonjs"\n                            ]\n                        }\n                    '},{text:"And also, add in `common.config.js` file because [this issue still exists](https://github.com/babel/babel/issues/7788).",media_type:"code_js",media_src:"\n                        module: {\n                            rules: [\n                                {\n                                    test: /\\.jsx?$/,\n                                    use: [\n                                        {\n                                            loader: 'babel-loader',\n                                            options: {\n                                                presets: [\n                                                    [\n                                                        '@babel/preset-env',\n                                                        {\n                                                            modules: false,\n                                                            useBuiltIns: 'entry',\n                                                            corejs: {\n                                                                version: 3,\n                                                                proposals: true\n                                                            }\n                                                        }\n                                                    ],\n                                                    '@babel/preset-react'\n                                                ]\n                                            }\n                                        }\n                                    ]\n                                }\n                            ]\n                        }\n                    "},{text:"We'll keep all the components in **components** folder of **src**. So, add a component `App` in **App** folder which contains `App.jsx`, `App.scss`, `App.test.jsx` and `index.js`. At this point, **src** folder structure should look like",media_type:"code",media_src:"\n                        react-starter/\n                            |\n                            |--- src/\n                            |      |--- components\n                            |      |        |--- App\n                            |      |        |     |--- App.jsx\n                            |      |        |     |--- App.scss\n                            |      |        |     |--- App.test.jsx\n                            |      |        |     |--- index.js\n                            |      |\n                            |      |--- index.js\n                            |      |--- index.css\n                            |\n                    "},{text:"Let's write our first component. So, open the `App.jsx` file and add the code",media_type:"code_js",media_src:'\n                        import React, { Component } from \'react\';\n                        import \'./App.scss\';\n                        \n                        class App extends Component {\n                            render() {\n                                return (\n                                    <div className="rs-app">\n                                        <img src="../../assets/images/favicon.png" alt="Dancing logo" className="rs-app__img" />\n                                        <p className="rs-app__text">{this.props.text}</p>\n                                    </div>\n                                );\n                            }\n                        }\n                        \n                        export default App;\n                    '},{text:"**ASIDE:** `App` is a [class](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes)-based component and we're using [JSX](https://reactjs.org/docs/introducing-jsx.html), a powerful HTML-like syntax extension to JavaScript to write component. `text` is a [props](https://reactjs.org/docs/components-and-props.html), an input from its parent component or where it's being called.",media_type:"",media_src:""},{text:"Let's add CSS to beautify the component. So, open the `App.scss` file and add the code",media_type:"code_css",media_src:"\n                        .rs-app {\n                            display: flex;\n                            flex-direction: column;\n                            justify-content: center;\n                            align-items: center;\n                            flex: 1 1 100%;\n                            width: 100%;\n                        \n                            &__img {\n                                animation: jump-img 1s linear 1s infinite alternate;\n                        \n                                &:hover {\n                                    background-image: linear-gradient(to top, #ffffff, #fff600);\n                                    border-radius: 50%;\n                                }\n                            }\n                        \n                            &__text {\n                                font-family: monospace;\n                            }\n                        }\n                        \n                        @keyframes jump-img {\n                            from {\n                                transform: translateY(0);\n                            }\n                        \n                            to {\n                                transform: translateY(-1rem);\n                            }\n                        }\n                    "},{text:"**ASIDE:** I'm using easy and powerful [sass](https://sass-lang.com/), `.scss` file, to write CSS styles. It's an abbreviation for syntactically awesome style sheets. Sass is a preprocessor scripting language that is interpreted or compiled into Cascading Style Sheets (CSS) using `sass-loader`.",media_type:"",media_src:""},{text:"Let's use **App**'s index file. So, open `App/index.js` and add the code",media_type:"code_js",media_src:"\n                        import App from './App.jsx';\n\n                        export default App;\n                    "},{text:"Let's use the `App` component to render it on the browser. So, open `src/index.js` and add the code",media_type:"code_js",media_src:"\n                        import React from 'react';\n                        import ReactDOM from 'react-dom';\n                        import App from './components/App';\n                        import './index.css';\n                        \n                        ReactDOM.render(\n                            <App />,\n                            document.getElementById('root')\n                        );\n                    "},{text:"**ASIDE:** [ReactDOM](https://reactjs.org/docs/react-dom.html) contains all DOM-specific methods that can be used at the top level of your app and as an escape hatch to get outside of the React model if you need to. [render](https://reactjs.org/docs/react-dom.html#render) renders a React element into the DOM in the supplied container and return a reference to the component or returns null for stateless component.",media_type:"",media_src:""},{text:"Now, if you run `build` script and look into **dist** folder, you would see minified bundles in **css** and **js** folders.",media_type:"code_js",media_src:"\n                        npm run build\n                    "},{text:"And, on running `start` script, the development server would have run and opened [http://localhost:9091/](http://localhost:9091/) link on the default browser.",media_type:"code_js",media_src:"\n                        npm start\n                    "},{text:"Let's do `props` typechecking. For that, install `prop-types`.",media_type:"code_js",media_src:"\n                        npm i -S prop-types\n                    "},{text:"Then, add the code",media_type:"code_js",media_src:'\n                        import React, { Component } from \'react\';\n                        import PropTypes from \'prop-types\';\n                        import \'./App.scss\';\n                        \n                        class App extends Component {\n                            render() {\n                                return (\n                                    <div className="rs-app">\n                                        <img src="../../assets/images/favicon.png" alt="Dancing logo" className="rs-app__img" />\n                                        <p className="rs-app__text">{this.props.text}</p>\n                                    </div>\n                                );\n                            }\n                        }\n\n                        App.propTypes = {\n                            text: PropTypes.string.isRequired\n                        };\n                        \n                        export default App;\n                    '},{text:"**ASIDE:** [propTypes](https://reactjs.org/docs/typechecking-with-proptypes.html) is used to run typechecking on the props for a component.",media_type:"",media_src:""},{text:"Let's do **linting** configuration. For that, install a bunch of modules",media_type:"code_js",media_src:"\n                        npm i -D eslint babel-eslint eslint-plugin-react\n                    "},{text:"Then, create a `.eslintrc` file at root and add the code",media_type:"code_js",media_src:'\n                        {\n                            "parser": "babel-eslint",\n                            "env": {\n                                "browser": true,\n                                "node": true,\n                                "es6": true,\n                                "jest": true\n                            },\n                            "extends": [\n                                "eslint:recommended",\n                                "plugin:react/recommended"\n                            ],\n                            "rules": {\n                                "react/prop-types": [\n                                    2,\n                                    {\n                                        "ignore": [\n                                            "children"\n                                        ]\n                                    }\n                                ]\n                            }\n                        }\n                    '},{text:'**ASIDE:** [eslint](https://eslint.org/) provides linting utility for JavaScript. We\'re enabling all common best practices rules with [eslint:recommended](https://eslint.org/docs/rules/) and [plugin:react/recommended](https://github.com/yannickcr/eslint-plugin-react) in `extends`. [babel-eslint](https://github.com/babel/babel-eslint) is used to lint all valid Babel code. `browser`, `node`, `es6` and `jest` environments are enabled by setting to `"true"` in `env`. The linting error for `children` in propTypes is exceptionally handled in `rules`.',media_type:"",media_src:""},{text:"Our **Final** project scaffolding will look like",media_type:"code",media_src:"\n                        react-starter/\n                            |--- node_modules\n                            |--- assets/\n                            |       |--- images\n                            |              |--- favicon.png\n                            |\n                            |--- config/\n                            |       |--- webpack\n                            |              |--- common.config.js\n                            |              |--- dev.config.js\n                            |              |--- prod.config.js\n                            |\n                            |--- dist/\n                            |      |--- js\n                            |      |     |--- main.xxxxxxxx.js\n                            |      |\n                            |      |--- css\n                            |      |     |--- main.xxxxxxxx.css\n                            |      |\n                            |      |--- favicon.png\n                            |      |--- index.html\n                            |\n                            |--- src/\n                            |      |--- components\n                            |      |        |--- App\n                            |      |        |     |--- App.jsx\n                            |      |        |     |--- App.scss\n                            |      |        |     |--- App.test.jsx\n                            |      |        |     |--- index.js\n                            |      |\n                            |      |--- index.js\n                            |      |--- index.css\n                            |\n                            |--- .babelrc\n                            |--- .eslintrc\n                            |--- .gitignore\n                            |--- index.html\n                            |--- package-lock.json\n                            |--- package.json\n                    "},{text:"**That's all folks!** Happy **react**ing and, hope, you've learnt new things.",media_type:"",media_src:""},{text:"**References:** An effort has been made to explain all the terminologies here itself but for further details, please follow the **links** provided in **ASIDE**s or present all over this page. For more details, please read [react official documentation](https://reactjs.org/docs/getting-started.html).",media_type:"",media_src:""},{text:"**Next Up:** [Jest testing framework setup](https://nunisa.github.io/2019/05/28/how-to-configure-jest-testing-framework). Read on!",media_type:"",media_src:""}]},{title:"How to configure Jest testing framework",published_on:"28/05/2019",descriptions:["Out of several configurations or project setup that I've done so far, be it [webpack](https://webpack.js.org/concepts), [react](https://reactjs.org/) etc, for several projects, I found configuring **Jest testing framework** to be the trickiest. At this point of time, one of the reasons being, you would most likely see the configuration not working due to upgrade to newer versions of Jest or its dependent packages/modules. For example, this [jest issue](https://github.com/facebook/jest/issues/8457) which never occurred with earlier versions, was solved with [this approach](https://github.com/facebook/jest/issues/8457#issuecomment-495188423) in the latest versions of jest and [babel-jest](https://jestjs.io/docs/en/getting-started.html#using-babel).","**Good news** is, I took the liberty of completing the configuration already and made it available to use in [react-starter](https://github.com/nunisa/react-starter.git) boilerplate for you. Go, grab it and run the demo tests right away!","So, in this post, I'll show you how I've avoided the above mentioned impediments and configured jest in the said react boilerplate. For ease of follow through, till the end, the configurations done are shown in a step by step manner. Also, an effort has been made to carry along the beginners too, with the experienced ones, without much reading of the [jest official documentation](https://jestjs.io/)."],steps:[{text:"Clone into **jest-starter** project folder from **react-starter** repository by running the command",media_type:"code_js",media_src:"\n                        git clone https://github.com/nunisa/react-starter.git jest-starter\n                    "},{text:'Change directory to jest-starter and delete **jest** folder from **config**. Also, delete `"jest"` block from `package.json` and `App.test.jsx` from `src/components/App` because I\'ll walk you through to show how it was done again. So folks, please stick around till the end.',media_type:"code_js",media_src:"\n                        cd jest-starter\n                    "},{text:"Install all the dependency modules at once.",media_type:"code_js",media_src:"\n                        npm i\n                    "},{text:"We need couple of packages to be able to run the jest tests. Let's install the required packages.",media_type:"code_js",media_src:"\n                        npm i -D jest babel-jest\n                    "},{text:"**ASIDE:** [jest](https://jestjs.io/) allows us to write tests. [babel-jest](https://jestjs.io/docs/en/getting-started.html#using-babel) allows us to use modern JavaScript while writing tests.",media_type:"",media_src:""},{text:"Let's add the configurations in `package.json` iteself but there are [other ways](https://jestjs.io/docs/en/configuration) also to achieve the same. So, just add `jest` keyword in package.json as follows",media_type:"code_js",media_src:'\n                        "jest": {\n                            "verbose": true\n                        }\n                    '},{text:"Update [npm](https://www.npmjs.com/) `test` script in package.json. Save the changes.",media_type:"code_js",media_src:'\n                        "scripts": {\n                            "test": "jest"\n                        }\n                    '},{text:"Let's add a simple test for our index file, i.e.: `src/index.js`. So, create `index.test.js` in **src** folder and keep in mind that the file name must contain `.test` or `.spec` for specific test matches. Then, add the code.",media_type:"code_js",media_src:"\n                        test('two plus two is four', () => {\n                            expect(2 + 2).toBe(4);\n                        });\n                    "},{text:'**ASIDE:** [test](https://jestjs.io/docs/en/api#testname-fn-timeout) is a method which runs the tests. `expect(2 + 2)` gives us access to [matchers](https://jestjs.io/docs/en/using-matchers) and returns an "expectation" object. `.toBe(4)` is a matcher.',media_type:"",media_src:""},{text:"Now, if you run `test` command, you would see the test run and passed.",media_type:"code_js",media_src:"\n                        npm test\n                    "},{text:'Since we\'ve set the `verbose` option to be `"true"` your terminal would look something like this',media_type:"img",media_src:"jest_test_initial.png"},{text:"So far so good. But let's take a deep dive and do advance level configurations so that it can be reused in any sized react projects. So, keep adding more options.",media_type:"code_js",media_src:'\n                        "jest": {\n                            "verbose": true,\n                            "clearMocks": true,\n                            "collectCoverageFrom": [\n                              "src/**/*.{js,jsx}"\n                            ],\n                            "moduleNameMapper": {\n                              "^@/(.*)$": "<rootDir>/src/$1"\n                            }\n                        }\n                    '},{text:"**ASIDE:** [clearMocks](https://jestjs.io/docs/en/configuration#clearmocks-boolean) is set to `\"true\"` to clear mock calls and instances between every test automatically. [collectcoverage](https://jestjs.io/docs/en/configuration#collectcoverage-boolean) is an array of glob patterns indicating a set of files for which coverage information should be collected. We're collecting coverage for all the tests in **src** folder. [moduleNameMapper](https://jestjs.io/docs/en/configuration#modulenamemapper-object-string-string) allows to stub out resources, like images or styles with a single module and the modules that are mapped to an alias are unmocked by default, regardless of whether automocking is enabled or not. `&lt;rootDir&gt;` is a string token which will refer to [rootDir](https://jestjs.io/docs/en/configuration#rootdir-string) which is the root of the directory containing your jest's config file or the package.json or the pwd if no package.json is found.",media_type:"",media_src:""},{text:"Let's add our own setup files. This involves writing our own polyfill, custom styles and files transformer. We're also using **airbnb**'s [enzyme](https://airbnb.io/enzyme/) while testing react components. So, we'll have a setup file for that too. To achieve those, install a bunch of required packages first.",media_type:"code_js",media_src:"\n                        npm i -D enzyme enzyme-adapter-react-16 whatwg-fetch promise object-assign raf\n                    "},{text:"**ASIDE:** [whatwg-fetch](https://github.com/github/fetch) is used to automatically polyfill window.fetch and related APIs. [promise](https://github.com/then/promise) is a super set of ES6 Promises designed for better use of promises and is used in `polyfill.js` for rejection tracking of a common issue in react. [object-assign](https://github.com/sindresorhus/object-assign) is used in `polyfill.js` to support `Object.assign()` across the browsers. [raf](https://github.com/chrisdickinson/raf) is used in tests as a requestAnimationFrame polyfill. `enzyme` is used to manipulate, traverse, and in some ways simulate runtime given the output, while testing react components. Along with enzyme, we also need an Adapter corresponding to the version of react you are using (we're using react@16.x), `enzyme-adapter-react-16`, to provide compatibility.",media_type:"",media_src:""},{text:"Let's organize jest related configurations in a separate directory like we did for webpack, [here](https://nunisa.github.io/2019/05/11/how-to-do-production-ready-webpack-4-configuration-from-scratch). So, create **jest** directory in **config** and then create `polyfill.js`, `enzyme.config.js`, `cssTransform.js` and `fileTransform.js` files in it. At this point, **jest** folder should look like",media_type:"code",media_src:"\n                        jest-starter/\n                            |--- config/\n                            |       |--- webpack\n                            |       |--- jest\n                            |              |--- cssTransform.js\n                            |              |--- enzyme.config.js\n                            |              |--- fileTransform.js\n                            |              |--- polyfill.js\n                            |\n                    "},{text:"**ASIDE:** `enzyme.config.js` is an enzyme adapter configuration file which enable its uses with react@16.x. `polyfill.js` is custom polyfill used in testing environment. `cssTransform.js` is a custom Jest transformer turning style imports into empty objects. `fileTransform.js` is a custom Jest transformer turning file imports into filenames.",media_type:"",media_src:""},{text:"Add the following code in `cssTransform.js`",media_type:"code_js",media_src:"\n                        'use strict';\n\n                        // This is a custom Jest transformer turning style imports into empty objects.\n                        \n                        module.exports = {\n                            process() {\n                                return 'module.exports = {};';\n                            },\n                            getCacheKey() {\n                                // The output is always the same.\n                                return 'cssTransform';\n                            },\n                        };\n                    "},{text:"Add the following code in `fileTransform.js`",media_type:"code_js",media_src:"\n                        'use strict';\n\n                        const path = require('path');\n                        \n                        // This is a custom Jest transformer turning file imports into filenames.\n                        \n                        module.exports = {\n                            process(src, filename) {\n                                return 'module.exports =' + JSON.stringify(path.basename(filename));\n                            },\n                        };\n                    "},{text:"Add the following code in `polyfill.js`",media_type:"code_js",media_src:"\n                        'use strict';\n\n                        if (typeof Promise === 'undefined') {\n                            // Rejection tracking prevents a common issue where React gets into an\n                            // inconsistent state due to an error, but it gets swallowed by a Promise,\n                            // and the user has no idea what causes React's erratic future behavior.\n                            require('promise/lib/rejection-tracking').enable();\n                            window.Promise = require('promise/lib/es6-extensions.js');\n                        }\n                        \n                        // fetch() polyfill for making API calls.\n                        require('whatwg-fetch');\n                        \n                        // Object.assign() is commonly used with React.\n                        // It will use the native implementation if it's present and isn't buggy.\n                        Object.assign = require('object-assign');\n                        \n                        // In tests, polyfill requestAnimationFrame since jsdom doesn't provide it yet.\n                        // We don't polyfill it in the browser--this is user's responsibility.\n                        if (process.env.NODE_ENV === 'test') {\n                            require('raf').polyfill(global);\n                        }                    \n                    "},{text:"And, configure the enzyme adapter as follows,",media_type:"code_js",media_src:"\n                        const Enzyme = require('enzyme');\n                        const Adapter = require('enzyme-adapter-react-16');\n                        \n                        Enzyme.configure({ adapter: new Adapter() });\n                    "},{text:"Now, let's add our own setup files in jest configs.",media_type:"code_js",media_src:'\n                        "jest": {\n                            "verbose": true,\n                            "clearMocks": true,\n                            "collectCoverageFrom": [\n                              "src/**/*.{js,jsx}"\n                            ],\n                            "moduleNameMapper": {\n                              "^@/(.*)$": "<rootDir>/src/$1"\n                            },\n                            "setupFiles": [\n                              "<rootDir>/config/jest/polyfill.js"\n                            ],\n                            "setupFilesAfterEnv": [\n                              "<rootDir>/config/jest/enzyme.config.js"\n                            ],\n                            "transform": {\n                              "^.+\\.(js|jsx)$": "<rootDir>/node_modules/babel-jest",\n                              "^.+\\.(le|sa|sc|c)ss$": "<rootDir>/config/jest/cssTransform.js",\n                              "(?!.*\\.(js|jsx|css|json)$)": "<rootDir>/config/jest/fileTransform.js"\n                            },\n                            "transformIgnorePatterns": [\n                              "node_modules/(?!(babel-jest)/)"\n                            ]\n                        }\n                    '},{text:"**ASIDE:** [setupFiles](https://jestjs.io/docs/en/configuration#setupfiles-array) contains a paths to `polyfill.js` that runs some polyfill code for the testing environment. [setupFilesAfterEnv](https://jestjs.io/docs/en/configuration#setupfilesafterenv-array) contains a paths to `enzyme.config.js` that runs enzyme adapter config for the testing framework before each test. [transform](https://jestjs.io/docs/en/configuration#transform-object-string-string) is map from regular expressions to paths to transformers, which enables to use modern JavaScript/ES6+ and custom transformer. [transformIgnorePatterns](https://jestjs.io/docs/en/configuration#transformignorepatterns-array-string) is an array of regexp pattern matched against the full path. If the test path matches any of the patterns, it will not be transformed.",media_type:"",media_src:""},{text:"All right! let's add our first jest tests for **App** component. So, create `src/components/App/App.test.jsx` again and add the code.",media_type:"code_js",media_src:"\n                        import React from 'react';\n                        import { shallow } from 'enzyme';\n                        import App from './';\n\n                        let wrapper;\n\n                        describe('App component', () => {\n                            beforeEach(() => {\n                                wrapper = shallow(<App text=\"React Starter\" />);\n                            });\n\n                            it('should be defined', () => {\n                                expect(typeof App).toEqual('function');\n                            });\n\n                            it('should be rendered without error', () => {\n                                expect(wrapper.length).toEqual(1);\n                            });\n                        });\n                    "},{text:"Now, if you run `npm test` command again, you would see all the test suites run and passed.",media_type:"img",media_src:"jest_test_all.png"},{text:"**That's all folks!** Happy **test**ing and, hope, you've learnt new things.",media_type:"",media_src:""},{text:"**References:** An effort has been made to explain all the terminologies here itself but for further details, please follow the **links** provided in **ASIDE**s or present all over this page. For more details, please read [jest official documentation](https://jestjs.io/).",media_type:"",media_src:""},{text:"**Next Up:** [Internationalization implementation using React Context API](https://nunisa.github.io/t/b/d/how-to-use-react-context-api-to-implement-internationalization-i18n). Read on!",media_type:"",media_src:""}]},{title:"How to use react Context API to implement internationalization (i18n)",published_on:"01/01/2052",descriptions:[],steps:[]}]},D=(n(50),function(e){function t(){return Object(r.a)(this,t),Object(l.a)(this,Object(d.a)(t).apply(this,arguments))}return Object(p.a)(t,e),Object(c.a)(t,[{key:"render",value:function(){return o.a.createElement(_,null,o.a.createElement("div",{className:"row"},o.a.createElement("div",{className:"col"},E.tech_posts.map(function(e,t){var n=e.title,s=e.published_on,a=e.descriptions,i="/".concat(s.split("/").reverse().join("/"),"/").concat(n.replace(/\(|\)/g,"").replace(/ /g,"-").toLowerCase());return o.a.createElement("div",{className:"row mb-30",key:s},o.a.createElement("div",{className:"col"},o.a.createElement(w,{title:n,publishedOn:s,isAtHome:!0}),o.a.createElement(S,{descriptions:a,redirectedURL:i,publishedOn:s,postIndex:t,isAtHome:!0}),t!==E.tech_posts.length-1?o.a.createElement(x,null):null))}))),o.a.createElement(y,null))}}]),t}(s.Component)),I=n(13),A=n(26),R=n(27),T=n.n(R),C=function(e){var t=e.mediaSrc,s=e.altText;return o.a.createElement("div",{className:"step__wrapper"},o.a.createElement("img",{className:"step__img",src:n(51)("./".concat(t)),alt:s}))},N=function(e){var t=e.mediaSrc,n=e.mediaSrcType;return o.a.createElement("div",{className:"step__wrapper"},n?o.a.createElement(o.a.Fragment,null,o.a.createElement("button",{className:"step__coptytoclipboard",title:"Copy to clipboard",onClick:function(e){!function(e,t){var n=document.createElement("textarea"),s=e.currentTarget.nextElementSibling;n.value=t.trim(),n.setAttribute("readonly",""),n.style.position="absolute",n.style.left="-9999px",document.body.appendChild(n),n.select(),document.execCommand("copy"),document.body.removeChild(n),s.style.display="inline-flex",setTimeout(function(){s.style.display="none"},1500)}(e,t)}},o.a.createElement("svg",{focusable:"false",preserveAspectRatio:"xMidYMid meet",xmlns:"http://www.w3.org/2000/svg",width:"20",height:"20",viewBox:"0 0 561 561","aria-hidden":"true"},o.a.createElement("path",{d:"M395.25,0h-306c-28.05,0-51,22.95-51,51v357h51V51h306V0zM471.75,102h-280.5c-28.05,0-51,22.95-51,51v357c0,28.05,22.95,51,51,51h280.5c28.05,0,51-22.95,51-51V153C522.75,124.95,499.8,102,471.75,102z M471.75,510h-280.5V153h280.5V510z",style:{fill:"#5f6368"}}))),o.a.createElement("span",{className:"step__copied-msg"},"Copied!"),o.a.createElement("pre",{className:"step__code language-".concat(n)},o.a.createElement("code",null,t))):o.a.createElement("pre",{className:"step__code"},o.a.createElement("code",null,t)))},O=(n(81),new j),M=function(e){function t(){var e,n;Object(r.a)(this,t);for(var s=arguments.length,o=new Array(s),a=0;a<s;a++)o[a]=arguments[a];return(n=Object(l.a)(this,(e=Object(d.a)(t)).call.apply(e,[this].concat(o)))).getMediaSrcType=function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=n.props.step.media_type.split("_");return e?t[0]:e?"":t[1]},n}return Object(p.a)(t,e),Object(c.a)(t,[{key:"render",value:function(){var e=this.props.step,t=e.media_type,n=e.media_src,s="",a="",i="";return t.startsWith("code")?(s=this.getMediaSrcType(!0),a=this.getMediaSrcType()):(s=t,i=n.substring(0,n.indexOf(".")).split("_").join(" ")),o.a.createElement("li",{className:"step"},o.a.createElement("span",{className:"step__text"}),"img"===s?o.a.createElement(C,{mediaSrc:n,alt:i}):"code"===s?o.a.createElement(N,{mediaSrc:n,mediaSrcType:a}):null)}},{key:"componentDidMount",value:function(){document.getElementsByClassName("step__text")[this.props.stepIndex].innerHTML=O.charInterpreter(this.props.step.text),this.getMediaSrcType()&&T.a.highlightAll()}}]),t}(s.Component),P=(n(82),function(e){return"01012052"===e.publishedOn.replace(/\//g,"")?o.a.createElement("div",{className:"to-be-decided"},o.a.createElement("p",null,"Publishing soon..."),o.a.createElement("img",{src:n(21),alt:"Publishing soon..."})):o.a.createElement("ol",{className:"steps"},e.steps.map(function(e,t){return o.a.createElement(M,{key:t,step:e,stepIndex:t})}))}),z=function(e){var t=e.title,n=e.publishedOn,s=e.descriptions,a=e.steps;return o.a.createElement(_,null,o.a.createElement(w,{title:t,publishedOn:n}),o.a.createElement(S,{descriptions:s,publishedOn:n}),o.a.createElement(P,{steps:a,publishedOn:n}),o.a.createElement(y,null))},L=function(){var e={};return E.tech_posts.forEach(function(t){var n=t.published_on.split("/").join("");e=Object(A.a)({},e,Object(I.a)({},"Post".concat(n),function(e){var t=e.postData,n=t.title,s=t.published_on,a=t.descriptions,i=t.steps;return o.a.createElement(z,{title:n,publishedOn:s,descriptions:a,steps:i})}))}),e}(),q=(n(83),function(e){function t(){return Object(r.a)(this,t),Object(l.a)(this,Object(d.a)(t).apply(this,arguments))}return Object(p.a)(t,e),Object(c.a)(t,[{key:"render",value:function(){var e=E.tech_posts,t=L.Post30032019,n=L.Post31032019,s=L.Post07042019,a=L.Post11052019,i=L.Post19052019,r=L.Post28052019,c=L.Post01012052;return o.a.createElement("div",{className:"container prl-0"},o.a.createElement(h,null),o.a.createElement(m.a,null,o.a.createElement(u.c,null,o.a.createElement(u.a,{path:"/",exact:!0,component:D}),e.map(function(e){var l=e.title,d=e.published_on,p=d.split("/"),m=p.join(""),h=l.replace(/\(|\)/g,"").replace(/ /g,"-").toLowerCase(),g="01012052"===m?"/t/b/d/".concat(h):"/".concat(p.reverse().join("/"),"/").concat(h);return o.a.createElement(u.a,{key:d,path:g,exact:!0,render:function(l){return"30032019"===m?o.a.createElement(t,{postData:e}):"31032019"===m?o.a.createElement(n,{postData:e}):"07042019"===m?o.a.createElement(s,{postData:e}):"11052019"===m?o.a.createElement(a,{postData:e}):"19052019"===m?o.a.createElement(i,{postData:e}):"28052019"===m?o.a.createElement(r,{postData:e}):"01012052"===m?o.a.createElement(c,{postData:e}):o.a.createElement(b,null)}})}),o.a.createElement(u.a,{component:b}))))}}]),t}(s.Component));Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));i.a.render(o.a.createElement(q,null),document.getElementById("root")),"serviceWorker"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})}]),[[28,1,2]]]);